meta {
  name: Validating Pet Vaccines
  type: http
  seq: 4
}

post {
  url: {{baseURL}}
  body: json
  auth: inherit
}

body:json {
  {
    "pets": [
      {
        "id": "pet_002",
        "name": "Jerry",
        "age": 4,
        "vaccinated": true,
        "tags": ["friendly", "energetic"]
      },
      {
        "id": "pet_005",
        "name": "Sam",
        "age": 2,
        "vaccinated": false,
        "tags": ["quiet", "food-motivated"]
      }
    ]
  }
  
}

tests {
  const { z } = require("zod");
  
  const response = res.getBody();
  
  const PetSchema = z.object({
    id: z.string().startsWith("pet_"),
    name: z.string(),
    age: z.number().int().nonnegative(),
    vaccinated: z.boolean(),
    tags: z.array(z.string())
  });
  
  const PetsResponseSchema = z.object({
    pets: z.array(PetSchema)
  });
  
  test("Valid response structure for pets", () => {
    PetsResponseSchema.parse(response);
  });
  test("All pets must be vaccinated", () => {
    const unvaccinated = response.pets.filter(pet => !pet.vaccinated);
    if (unvaccinated.length > 0) {
      throw new Error(`Found unvaccinated pets: ${unvaccinated.map(p => p.name).join(", ")}`);
    }
  });
  
}
